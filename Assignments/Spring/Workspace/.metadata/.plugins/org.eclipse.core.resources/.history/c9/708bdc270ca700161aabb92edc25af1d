package com.spring.controller;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spring.entity.Advertisement;
import com.spring.entity.Message;
import com.spring.entity.User;
import com.spring.service.AdvertisementService;

@RestController
@RequestMapping("/advertisement")
public class AdvertisementController {

	@Autowired
	private AdvertisementService advertiseService;

	static int token = 1;
	static ArrayList<Integer> loggedInUserAuthTokens = new ArrayList<Integer>();
	static ArrayList<User> loggedInUsers = new ArrayList<User>();

	static ArrayList<Message> messages = new ArrayList<Message>();
	static ArrayList<User> users = new ArrayList<User>();

	static {
		users.add(new User("Shrey", "Garg", "shrey", "shrey", "shrey@gmail.com", 12345));
	}

	static ArrayList<Advertisement> advertisements = new ArrayList<Advertisement>();

	@RequestMapping(value = "/login", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public String login(@RequestBody User user) {
		return advertiseService.login(user);
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public String register(@RequestBody User user) {
		return advertiseService.register(user);
	}

	@RequestMapping(value = "/user", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public User getUser(@RequestParam(value = "id") int id) {
		return advertiseService.getUser(id);
	}

	@RequestMapping(headers = {
			"auth_token" }, value = "/postAd", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public String postAd(@RequestHeader Integer auth_token, @RequestBody Advertisement advertisement) {
		if (advertiseService.create(advertisement) != null)
			return "Ad posted";
		return "Couldn't post ad,Invalid auth code";
	}

	@RequestMapping(value = "/postAd", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE)
	public String updateAd(@RequestParam int id, @RequestBody Advertisement advertisement) {
		return advertiseService.updateAd(id,advertisement);
	}

	@RequestMapping(value = "/posts", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Advertisement> getPosts() {
		return advertiseService.getAdvertisements();
	}
	

	@RequestMapping(headers = { "auth_token" }, value = "/logout", method = RequestMethod.DELETE)
	public String logout(@RequestHeader Integer auth_token, @RequestParam(value = "username") String username) {
		if (loggedInUserAuthTokens.contains(auth_token)) {
			for (User user : loggedInUsers) {
				if (user.getUsername().equals(username)) {
					loggedInUsers.remove(user);
				}
			}
			loggedInUserAuthTokens.remove(auth_token);
			return "Logged out.";
		}
		return "Invalid auth_code, couldn't log out.";
	}

	@RequestMapping(headers = {
			"auth_token" }, value = "/post", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public Advertisement getPost(@RequestHeader Integer auth_token, @RequestParam(value = "postId") String postId) {
		Advertisement advertisementResult = new Advertisement();
		if (loggedInUserAuthTokens.contains(auth_token)) {
			for (Advertisement advertisement : advertisements) {
				if (advertisement.getPostId().equals(postId))
					return advertisement;
			}
		}
		return advertisementResult;

	}

	public static User getCurrentLoggedInUser(Integer token) {
		int index = -1;
		for (int i = 0; i < loggedInUserAuthTokens.size(); i++) {
			if (loggedInUserAuthTokens.get(i) == token) {
				return loggedInUsers.get(i);
			}
		}
		return null;
	}

	@RequestMapping(headers = { "auth_token" }, value = "/post", method = RequestMethod.DELETE)
	public String deletePost(@RequestHeader Integer auth_token, @RequestParam(value = "postId") String postId) {
		Advertisement advertisementResult = new Advertisement();
		if (loggedInUserAuthTokens.contains(auth_token)) {
			for (Advertisement advertisement : advertisements) {
				if (advertisement.getPostId().equals(postId))
					advertisements.remove(advertisement);
				return "Ad deleted";
			}
		}
		return "Ad not found";

	}

	@RequestMapping(headers = {
			"auth_token" }, value = "/viewAd", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public Advertisement viewAd(@RequestHeader Integer auth_token, @RequestParam(value = "postId") String postId) {
		Advertisement advertisementResult = new Advertisement();
		if (loggedInUserAuthTokens.contains(auth_token)) {
			for (Advertisement advertisement : advertisements) {
				if (advertisement.getPostId().equals(postId))
					return advertisement;
			}
		}
		return advertisementResult;

	}

	@RequestMapping(value = "/categories", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public HashSet<String> allCategories() {
		HashSet<String> categories = new HashSet<String>();
		for (Advertisement advertisement : advertisements) {
			categories.add(advertisement.getCategory());
		}
		return categories;

	}

	@RequestMapping(value = "/actions", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public HashSet<String> allActions() {
		HashSet<String> actions = new HashSet<String>();
		actions.add("Buy");
		actions.add("Sell");
		actions.add("Rent");
		return actions;

	}

	@RequestMapping(headers = {
			"auth_token" }, value = "/message", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public String message(@RequestHeader Integer auth_token, @RequestBody Message message) {
		if (loggedInUserAuthTokens.contains(auth_token)) {
			for (Advertisement advertisement : advertisements) {
				if (advertisement.getPostId().equals(message.getPostId())) {
					messages.add(message);
					return "Message sent";
				}
			}
		}
		return "Invalid auth token";
	}

}
